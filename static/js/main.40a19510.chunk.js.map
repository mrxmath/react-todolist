{"version":3,"sources":["components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","_this","this","react_default","a","createElement","className","onClick","props","checkItem","item","id","type","title","Component","List","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","items","done","bind","assertThisInitialized","setState","prevState","map","_this2","components_ListItem","key","App","placeholder","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAgBeA,mLAbJ,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,MACEC,UAAU,qBACVC,QAAS,kBAAMN,EAAKO,MAAMC,UAAUR,EAAKO,MAAME,KAAKC,MAEpDR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,aACZT,EAAAC,EAAAC,cAAA,YAAOH,KAAKM,MAAME,KAAKG,eARRC,aCwDRC,cAtDb,SAAAA,IAAc,IAAAd,EAAA,OAAAe,OAAAC,EAAA,EAAAD,CAAAd,KAAAa,IACZd,EAAAe,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAlB,QACKmB,MAAQ,CACXC,MAAO,CACL,CACEX,GAAI,EACJE,MAAO,QACPU,MAAM,GAER,CACEZ,GAAI,EACJE,MAAO,QACPU,MAAM,GAER,CACEZ,GAAI,EACJE,MAAO,QACPU,MAAM,GAER,CACEZ,GAAI,EACJE,MAAO,QACPU,MAAM,GAER,CACEZ,GAAI,EACJE,MAAO,QACPU,MAAM,KAIZtB,EAAKQ,UAAYR,EAAKQ,UAAUe,KAAfR,OAAAS,EAAA,EAAAT,CAAAf,IA/BLA,yEAiCJU,GACRT,KAAKwB,SAAS,SAAAC,GAOZ,MAAO,CACLL,MAPeK,EAAUL,MAAMM,IAAI,SAAAlB,GAInC,OAHIA,EAAKC,KAAOA,IACdD,EAAKa,MAAQb,EAAKa,MAEbb,wCAOJ,IAAAmB,EAAA3B,KACDoB,EAAQpB,KAAKmB,MAAMC,MAAMM,IAAI,SAAAlB,GAAI,OACrCP,EAAAC,EAAAC,cAACyB,EAAD,CAAUC,IAAI,YAAYrB,KAAMA,EAAMD,UAAWoB,EAAKpB,cAExD,OAAON,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBgB,UAnDvBR,mBCYJkB,MAVf,WACE,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,aACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiB2B,YAAY,sBAC9C9B,EAAAC,EAAAC,cAAC6B,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.40a19510.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ListItem extends Component {\n  render() {\n    return (\n      <li\n        className=\"TodoApp__list-item\"\n        onClick={() => this.props.checkItem(this.props.item.id)}\n      >\n        <input type=\"checkbox\" />\n        <span>{this.props.item.title}</span>\n      </li>\n    );\n  }\n}\n\nexport default ListItem;\n","import React, { Component } from \"react\";\nimport ListItem from \"./ListItem\";\n\nclass List extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [\n        {\n          id: 1,\n          title: \"Teste\",\n          done: false\n        },\n        {\n          id: 2,\n          title: \"Teste\",\n          done: false\n        },\n        {\n          id: 3,\n          title: \"Teste\",\n          done: false\n        },\n        {\n          id: 4,\n          title: \"Teste\",\n          done: false\n        },\n        {\n          id: 5,\n          title: \"Teste\",\n          done: false\n        }\n      ]\n    };\n    this.checkItem = this.checkItem.bind(this);\n  }\n  checkItem(id) {\n    this.setState(prevState => {\n      const curState = prevState.items.map(item => {\n        if (item.id === id) {\n          item.done = !item.done;\n        }\n        return item;\n      });\n      return {\n        items: curState\n      };\n    });\n  }\n  render() {\n    const items = this.state.items.map(item => (\n      <ListItem key=\"{item.id}\" item={item} checkItem={this.checkItem} />\n    ));\n    return <ul className=\"TodoApp__list\">{items}</ul>;\n  }\n}\n\nexport default List;\n","import React from \"react\";\n//Components\nimport List from \"./components/List\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"TodoApp\">\n      <h1 className=\"TodoApp__title\">TODO LIST</h1>\n      <input className=\"TodoApp__input\" placeholder=\"add a new todo...\" />\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}