{"version":3,"sources":["components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","_this","this","react_default","a","createElement","className","onClick","props","markComplete","item","id","type","checked","done","title","deleteItem","Component","List","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","items","map","components_ListItem","key","App","inputElement","React","createRef","setState","state","filtered","filter","console","log","addItem","newItem","concat","toConsumableArray","pressEnter","bind","assertThisInitialized","e","itemText","target","value","curItem","Date","now","placeholder","onKeyPress","ref","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65e97e1d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ListItem extends Component {\n  render() {\n    return (\n      <li className=\"TodoApp__list-item\" onClick={() => this.props.markComplete(this.props.item.id)}>\n        <input type=\"checkbox\" checked={this.props.item.done} />\n        <span className=\"TodoApp__item-title\">{this.props.item.title}</span>\n        <span onClick={() => this.props.deleteItem(this.props.item.id)}>x</span>\n      </li>\n    );\n  }\n}\n\nexport default ListItem;\n","import React, { Component } from \"react\";\nimport ListItem from \"./ListItem\";\n\nclass List extends Component {\n  constructor() {\n    super();\n  }\n  render() {\n    const items = this.props.items.map(item => <ListItem key=\"{item.id}\" item={item} markComplete={this.props.markComplete} deleteItem={this.props.deleteItem} />);\n    return <ul className=\"TodoApp__list\">{items}</ul>;\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\n//Components\nimport List from \"./components/List\";\nimport \"./App.css\";\n\nclass App extends Component {\n  inputElement = React.createRef();\n  constructor() {\n    super();\n    this.state = {\n      items: []\n    };\n    this.pressEnter = this.pressEnter.bind(this);\n    this.markComplete = this.markComplete.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.addItem = this.addItem.bind(this);\n  }\n  pressEnter(e) {\n    if (e.key === \"Enter\") {\n      const itemText = e.target.value;\n      const curItem = { id: Date.now(), title: itemText, done: false };\n      this.addItem(curItem);\n      e.target.value = \"\";\n    }\n  }\n  markComplete = id => {\n    this.setState({\n      items: this.state.items.map(item => {\n        if (item.id === id) item.done = !item.done;\n        return item;\n      })\n    });\n  };\n  deleteItem = id => {\n    const filtered = this.state.items.filter(item => item.id !== id);\n    this.setState({ items: filtered }, console.log(this.state.items));\n  };\n  addItem = newItem => {\n    this.setState({ items: [...this.state.items, newItem] });\n  };\n  render() {\n    return (\n      <div className=\"TodoApp\">\n        <h1 className=\"TodoApp__title\">TODO LIST</h1>\n        <input className=\"TodoApp__input\" placeholder=\"add a new todo...\" onKeyPress={this.pressEnter} ref={this.inputElement} />\n        <List items={this.state.items} markComplete={this.markComplete} deleteItem={this.deleteItem} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}