{"version":3,"sources":["components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","_this","this","react_default","a","createElement","className","props","item","done","id","type","checked","onClick","markComplete","for","title","deleteItem","Component","List","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","items","map","components_ListItem","key","App","inputElement","React","createRef","setState","prevState","state","updateStorage","toConsumableArray","filter","addItem","newItem","concat","pressEnter","bind","assertThisInitialized","storage","localStorage","getItem","JSON","parse","setItem","stringify","e","itemText","target","value","curItem","Date","now","placeholder","onKeyPress","ref","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8269dc89.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ListItem extends Component {\r\n  render() {\r\n    return (\r\n      <li\r\n        className={\r\n          this.props.item.done\r\n            ? \"TodoApp__list-item done\"\r\n            : \"TodoApp__list-item\"\r\n        }\r\n      >\r\n        <input\r\n          id={this.props.item.id}\r\n          className=\"TodoApp__item-checkbox\"\r\n          type=\"checkbox\"\r\n          checked={this.props.item.done}\r\n          onClick={() => this.props.markComplete(this.props.item.id)}\r\n        />\r\n\r\n        <label for={this.props.item.id} className=\"TodoApp__item-title\">\r\n          {this.props.item.title}\r\n        </label>\r\n\r\n        <span\r\n          className=\"TodoApp__item-close\"\r\n          onClick={() => this.props.deleteItem(this.props.item.id)}\r\n        />\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListItem;\r\n","import React, { Component } from \"react\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nclass List extends Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n  render() {\r\n    const items = this.props.items.map(item => <ListItem key=\"{item.id}\" item={item} markComplete={this.props.markComplete} deleteItem={this.props.deleteItem} />);\r\n    return <ul className=\"TodoApp__list\">{items}</ul>;\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\r\n//Components\r\nimport List from \"./components/List\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  inputElement = React.createRef();\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      items: []\r\n    };\r\n    this.pressEnter = this.pressEnter.bind(this);\r\n    this.markComplete = this.markComplete.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.addItem = this.addItem.bind(this);\r\n  }\r\n\r\n  //Responsavel por verificar se existe um state previo e se nao houer, gravar\r\n  componentDidMount() {\r\n    const storage = localStorage.getItem(\"items\");\r\n    if (storage) {\r\n      this.setState({\r\n        items: JSON.parse(storage)\r\n      });\r\n    } else {\r\n      this.updateStorage();\r\n    }\r\n  }\r\n\r\n  //Responsavel por atualizar o localStorage com o state atual\r\n  updateStorage() {\r\n    localStorage.setItem(\"items\", JSON.stringify(this.state.items));\r\n  }\r\n\r\n  //Responsavel por delegar o botao enter com a funcÃ£o de atualizar a listagem\r\n  pressEnter(e) {\r\n    if (e.key === \"Enter\") {\r\n      const itemText = e.target.value;\r\n      const curItem = { id: Date.now(), title: itemText, done: false };\r\n      this.addItem(curItem);\r\n      e.target.value = \"\";\r\n    }\r\n  }\r\n\r\n  //Responsavel por setar um item da listagem como completo de acordo com o seu id\r\n  markComplete = id => {\r\n    this.setState(prevState => {\r\n      return {\r\n        items: this.state.items.map(item => {\r\n          if (item.id === id) item.done = !item.done;\r\n          return item;\r\n        })\r\n      };\r\n    }, this.updateStorage());\r\n  };\r\n\r\n  //Responsavel por deletar um item da listagem de acordo com o seu id\r\n  deleteItem = id => {\r\n    this.setState(prevState => {\r\n      return { items: [...this.state.items.filter(item => item.id !== id)] };\r\n    }, this.updateStorage());\r\n  };\r\n\r\n  //Responsavel por adicionar os itens na listagem de acordo com o parametro recebido\r\n  addItem = newItem => {\r\n    this.setState(prevState => {\r\n      return { items: [...this.state.items, newItem] };\r\n    }, this.updateStorage());\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"TodoApp\">\r\n        <h1 className=\"TodoApp__title\">TODO LIST</h1>\r\n\r\n        <input\r\n          className=\"TodoApp__input\"\r\n          placeholder=\"add a new todo...\"\r\n          onKeyPress={this.pressEnter}\r\n          ref={this.inputElement}\r\n        />\r\n\r\n        <List\r\n          items={this.state.items}\r\n          markComplete={this.markComplete}\r\n          deleteItem={this.deleteItem}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}